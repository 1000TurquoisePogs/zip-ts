#!groovy

/**
 * This program and the accompanying materials are made available under the terms of the
 * Eclipse Public License v2.0 which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-v20.html
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Copyright IBM Corporation 2018, 2019
 */

node('ibm-jenkins-slave-nvm') {
  def lib = library("jenkins-library@staging").org.zowe.jenkins_shared_library

  def ZOWE_RELEASE_REPOSITORY = 'libs-release-local'
  def ZOWE_RELEASE_PATH = '/org/zowe'

  def pipeline = lib.pipelines.generic.GenericPipeline.new(this)
  def releaseFilenamePattern = "zowe-*.pax"
  def releaseCliFilenamePattern = "zowe-cli-package-*.zip"
  def releaseFilename
  def releaseCliFilename
  def releaseFilePath
  def releaseFileFull
  def releaseCliFileFull
  def isFormalRelease = false
  def gitRevision = null
  def gitCliRevision = null

  pipeline.admins.add("jackjia", "markackert")

  // we have extra parameters for integration test
  pipeline.addBuildParameters(
    string(
      name: 'ZOWE_BUILD_REPOSITORY',
      description: 'Zowe successful build repository',
      defaultValue: 'libs-snapshot-local',
      trim: true,
      required: true
    ),
    string(
      name: 'ZOWE_BUILD_NAME',
      description: 'Zowe successful build name',
      defaultValue: 'zowe-install-packaging :: master',
      trim: true,
      required: true
    ),
    string(
      name: 'ZOWE_BUILD_NUMBER',
      description: 'REQUIRED if ZOWE_BUILD_RC_PATH is empty. Zowe successful build number',
      defaultValue: '',
      trim: true
    ),
    string(
      name: 'ZOWE_BUILD_RC_PATH',
      description: 'REQUIRED if ZOWE_BUILD_NUMBER is empty. Zowe RC build artifactory download path. If the build original file has been removed from artifactory, we can promote any existing file. Example: libs-release-local/org/zowe/0.9.3-RC2/zowe-0.9.3-RC2.pax',
      defaultValue: '',
      trim: true
    ),
    string(
      name: 'ZOWE_CLI_BUILD_REPOSITORY',
      description: 'Zowe CLI successful build repository',
      defaultValue: 'libs-snapshot-local',
      trim: true,
      required: true
    ),
    string(
      name: 'ZOWE_CLI_BUILD_NAME',
      description: 'Zowe CLI successful build name',
      defaultValue: 'Zowe CLI Bundle :: master',
      trim: true,
      required: true
    ),
    string(
      name: 'ZOWE_CLI_BUILD_NUMBER',
      description: 'REQUIRED if ZOWE_CLI_BUILD_RC_PATH is empty. Zowe CLI successful build number',
      defaultValue: '',
      trim: true
    ),
    string(
      name: 'ZOWE_CLI_BUILD_RC_PATH',
      description: 'REQUIRED if ZOWE_CLI_BUILD_NUMBER is empty. Zowe CLI build artifactory download path. If the build original file has been removed from artifactory, we can promote any existing file. Example: libs-release-local/org/zowe/0.9.3-RC2/zowe-cli-package-0.9.3.zip',
      defaultValue: '',
      trim: true
    ),
    string(
      name: 'ZOWE_RELEASE_CATEGORY',
      description: 'REQUIRED. Zowe release category. For example, stable',
      defaultValue: 'stable',
      trim: true,
      required: true
    ),
    string(
      name: 'ZOWE_RELEASE_VERSION',
      description: 'REQUIRED. Zowe release version without prefix v. For example, 0.9.0',
      defaultValue: '',
      trim: true,
      required: true
    ),
    // >>>>>>>> SSH access of testing server zOSaaS layer
    string(
      name: 'PUBLISH_SSH_HOST',
      description: 'Host of publishing server',
      defaultValue: 'wash.zowe.org',
      trim: true,
      required: true
    ),
    string(
      name: 'PUBLISH_SSH_PORT',
      description: 'SSH port of publishing server',
      defaultValue: '22',
      trim: true,
      required: true
    ),
    credentials(
      name: 'PUBLISH_SSH_CREDENTIAL',
      description: 'The SSH credential used to connect publishing server',
      credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl',
      defaultValue: 'ssh-zowe-publish',
      required: true
    ),
    string(
      name: 'PUBLISH_DIRECTORY',
      description: 'Publishing directory',
      defaultValue: '/var/www/projectgiza.org/builds',
      trim: true,
      required: true
    ),
    string(
      name: 'CODE_SIGNING_KEY_PASSPHRASE',
      description: 'Key ID and passphrase to sign the build',
      credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl',
      defaultValue: 'code-signing-key-passphrase-jack',
      required: false
    )
  )

  pipeline.setup(
    packageName: 'org.zowe',
    github: [
      email                      : lib.Constants.DEFAULT_GITHUB_ROBOT_EMAIL,
      usernamePasswordCredential : lib.Constants.DEFAULT_GITHUB_ROBOT_CREDENTIAL,
    ],
    artifactory: [
      url                        : lib.Constants.DEFAULT_ARTIFACTORY_URL,
      usernamePasswordCredential : lib.Constants.DEFAULT_ARTIFACTORY_ROBOT_CREDENTIAL,
    ]
  )

  pipeline.build(
    timeout       : [time: 5, unit: 'MINUTES'],
    isSkippable   : false,
    operation     : {
      echo "build?"
    }
  )

  pipeline.createStage(
    name          : "Validate",
    isSkippable   : true,
    stage         : {
      if (!params.ZOWE_BUILD_NAME) {
        error "ZOWE_BUILD_NAME is required to promote build."
      }
      if (!params.ZOWE_BUILD_NUMBER && !params.ZOWE_BUILD_RC_PATH) {
        error "ZOWE_BUILD_NUMBER or ZOWE_BUILD_RC_PATH is required to promote build."
      }
      if (!params.ZOWE_CLI_BUILD_NAME) {
        error "ZOWE_CLI_BUILD_NAME is required to promote build."
      }
      if (!params.ZOWE_CLI_BUILD_NUMBER && !params.ZOWE_CLI_BUILD_RC_PATH) {
        error "ZOWE_CLI_BUILD_NUMBER or ZOWE_CLI_BUILD_RC_PATH is required to promote build."
      }
      if (!params.ZOWE_RELEASE_CATEGORY) {
        error "ZOWE_RELEASE_CATEGORY is required to promote build."
      }
      if (!params.ZOWE_RELEASE_VERSION) {
        error "ZOWE_RELEASE_VERSION is required to promote build."
      }

      // thanks semver/semver, this regular expression comes from
      // https://github.com/semver/semver/issues/232#issuecomment-405596809
      if (!(params.ZOWE_RELEASE_VERSION ==~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/)) {
        error "${params.ZOWE_RELEASE_VERSION} is not a valid semantic version."
      }
      if (params.ZOWE_RELEASE_VERSION ==~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/) {
        isFormalRelease = true
        echo ">>>> Version ${params.ZOWE_RELEASE_VERSION} is considered as a FORMAL RELEASE."
      } else {
        echo ">>>> Version ${params.ZOWE_RELEASE_VERSION} is NOT considered as a FORMAL RELEASE."
      }

      releaseFilename = "zowe-${params.ZOWE_RELEASE_VERSION}.pax"
      releaseCliFilename = "zowe-cli-package-${params.ZOWE_RELEASE_VERSION}.zip"
      releaseFilePath = "${ZOWE_RELEASE_REPOSITORY}${ZOWE_RELEASE_PATH}/${params.ZOWE_RELEASE_VERSION}"
      releaseFileFull = "${releaseFilePath}/${releaseFilename}"
      releaseCliFileFull = "${releaseFilePath}/${releaseCliFilename}"

      echo "Checking if ${params.ZOWE_RELEASE_VERSION} already exists ..."

      // check artifactory
      def versionOnArtifactory
      try {
        versionOnArtifactory = pipeline.artifactory.getArtifact(releaseFilePath)
      } catch (e) {
        // ignore errors
      }
      if (versionOnArtifactory && versionOnArtifactory.path) {
        error "Zowe version ${params.ZOWE_RELEASE_VERSION} already exists (${releaseFilePath})"
      } else {
        echo ">>>> Target artifactory folder doesn't exist, may proceed."
      }

      // check build info
      if (params.ZOWE_BUILD_NUMBER) {
        def zoweBuild = pipeline.artifactory.getBuildInfo(
          params.ZOWE_BUILD_NAME,
          params.ZOWE_BUILD_NUMBER
        )
        gitRevision = zoweBuild && zoweBuild && zoweBuild.vcsRevision
        if (!("${gitRevision}" ==~ /^[0-9a-fA-F]{40}$/)) { // if it's a SHA-1 commit hash
          error "Cannot extract git revision from build \"${params.ZOWE_BUILD_NAME}/${params.ZOWE_BUILD_NUMBER}\""
        }
        echo ">>>> Build ${params.ZOWE_BUILD_NAME}/${params.ZOWE_BUILD_NUMBER} commit hash is ${gitRevision}, may proceed."
      }
      if (params.ZOWE_CLI_BUILD_NUMBER) {
        def zoweCliBuild = pipeline.artifactory.getArtifact(
          params.ZOWE_CLI_BUILD_NAME,
          params.ZOWE_CLI_BUILD_NUMBER
        )
        gitCliRevision = zoweCliBuild && zoweCliBuild && zoweCliBuild.vcsRevision
        if (!("${gitCliRevision}" ==~ /^[0-9a-fA-F]{40}$/)) { // if it's a SHA-1 commit hash
          error "Cannot extract git revision from build \"${params.ZOWE_CLI_BUILD_NAME}/${params.ZOWE_CLI_BUILD_NUMBER}\""
        }
        echo ">>>> Build ${params.ZOWE_CLI_BUILD_NAME}/${params.ZOWE_CLI_BUILD_NUMBER} commit hash is ${gitCliRevision}, may proceed."
      }

      // check deploy target directory
      withCredentials([usernamePassword(credentialsId: params.PUBLISH_SSH_CREDENTIAL, passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
        // move to target folder, split and generate hash
        def versionOnPublishDir = sh(script:"""SSHPASS=${PASSWORD} sshpass -e ssh -tt -o StrictHostKeyChecking=no -o PubkeyAuthentication=no -p ${params.PUBLISH_SSH_PORT} ${USERNAME}@${params.PUBLISH_SSH_HOST} << EOF
[ -d '${params.PUBLISH_DIRECTORY}/${params.ZOWE_RELEASE_CATEGORY}/${params.ZOWE_RELEASE_VERSION}' ] && exit 1
exit 0
EOF""", returnStatus:true)
        echo "Exit code: ${versionOnPublishDir}"
        if ("${versionOnPublishDir}" == "1") {
          error "Zowe version ${params.ZOWE_RELEASE_VERSION} already exists (${params.PUBLISH_DIRECTORY}/${params.ZOWE_RELEASE_CATEGORY}/${params.ZOWE_RELEASE_VERSION})"
        } else {
          echo ">>>> Target publish folder doesn't exist, may proceed."
        }
      }
    },
    timeout: [time: 10, unit: 'MINUTES']
  )

  pipeline.end()
}
