#!groovy

/**
 * This program and the accompanying materials are made available under the terms of the
 * Eclipse Public License v2.0 which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-v20.html
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Copyright IBM Corporation 2020
 */


node('ibm-jenkins-slave-nvm') {
  String INSTALL_TEST_PATH = 'tests/installation'
  String SANITY_TEST_PATH = 'tests/sanity'

  // Test server configurations:
  // - ansible host id
  // - credential id for ssh server hostname and port
  // - credential id for ssh username and password
  Map TEST_SERVERS = [
    'marist': [
      ansible_host     : 'marist-1',
      ssh_hostport     : 'ssh-marist-server-zzow01-hostport',
      ssh_userpass     : 'ssh-marist-server-zzow01',
      node_home_pattern: '/ZOWE/node/node-{NODE_VERSION}-os390-s390x'
    ],
    'marist-2': [
      ansible_host     : 'marist-2',
      ssh_hostport     : 'ssh-marist-server-zzow02-hostport',
      ssh_userpass     : 'ssh-marist-server-zzow02'
    ],
    'marist-3': [
      ansible_host     : 'marist-3',
      ssh_hostport     : 'ssh-marist-server-zzow03-hostport',
      ssh_userpass     : 'ssh-marist-server-zzow03'
    ],
    // 'river': [
    //   ansible_host     : 'river-0',
    //   ssh_hostport     : 'ssh-river-original-hostport',
    //   ssh_userpass     : 'ssh-zdt-test-image-guest'
    // ],
    'river-3': [
      ansible_host     : 'river-3',
      ssh_hostport     : 'ssh-river-c3-hostport',
      ssh_userpass     : 'ssh-zdt-test-image-guest'
    ]
  ];
  // Test scopes, what test should we run
  // each scope can have these optional configurations
  // - jenkins_primary_lock: should be a string
  // - jenkins_extra_locks: should be a list of strings
  Map TEST_SCOPES = [
    'convenience build': [
      test_files: 'dist/__tests__/basic/install.js',
    ],
    'smpe fmid': [
      test_files: 'dist/__tests__/basic/install-fmid.js',
    ],
    'smpe ptf': [
      test_files: 'dist/__tests__/basic/install-ptf.js',
    ],
    'bundle: multiple node versions': [
      test_files: 'dist/__tests__/extended/node-versions/',
      jenkins_primary_lock: 'marist',
    ],
    'bundle: convenience build on multiple security systems': [
      test_files: 'dist/__tests__/extended/security-systems/convenience/',
      jenkins_primary_lock: 'marist',
      jenkins_extra_locks: ['marist-2', 'marist-3'],
    ],
    'bundle: smpe fmid on multiple security systems': [
      test_files: 'dist/__tests__/extended/security-systems/fmid/',
      jenkins_primary_lock: 'marist',
      jenkins_extra_locks: ['marist-2', 'marist-3'],
    ],
    'bundle: smpe ptf on multiple security systems': [
      test_files: 'dist/__tests__/extended/security-systems/ptf/',
      jenkins_primary_lock: 'marist',
      jenkins_extra_locks: ['marist-2', 'marist-3'],
    ],
    'bundle: all extended tests': [
      test_files: 'dist/__tests__/extended/',
      jenkins_primary_lock: 'marist',
      jenkins_extra_locks: ['marist-2', 'marist-3'],
    ],
  ]

  def lib = library("jenkins-library").org.zowe.jenkins_shared_library

  def pipeline = lib.pipelines.generic.GenericPipeline.new(this)

  pipeline.admins.add("jackjia")

  // we have extra parameters for integration test
  pipeline.addBuildParameters(
    booleanParam(
      name: 'STARTED_BY_AUTOMATION',
      description: 'If this task is started with pipeline automation. Set to true if you want to skip the Continue prompt question.',
      defaultValue: false
    ),
    // >>>>>>>> parameters of where and what to test
    choice(
      name: 'TEST_SERVER',
      choices: TEST_SERVERS.keySet().collect(),
      description: 'Choose which server to run test',
      trim: true
    ),
    choice(
      name: 'TEST_SCOPE',
      choices: TEST_SCOPES.keySet().collect(),
      description: 'Choose scope of test. PLEASE NOTE: a test scope bundle usually ignores the value of TEST_SERVER.',
      trim: true
    ),
    // >>>>>>>> parameters of artifactory
    string(
      name: 'ZOWE_ARTIFACTORY_PATTERN',
      description: 'Zowe artifactory download pattern',
      defaultValue: 'libs-snapshot-local/org/zowe/*.pax',
      trim: true,
      required: true
    ),
    string(
      name: 'ZOWE_ARTIFACTORY_BUILD',
      description: 'Zowe artifactory download build',
      defaultValue: 'zowe-install-packaging :: staging',
      trim: true
    ),
    string(
      name: 'ZOWE_CLI_ARTIFACTORY_PATTERN',
      description: 'Zowe artifactory download pattern',
      defaultValue: 'libs-snapshot-local/org/zowe/cli/zowe-cli-package/*.zip',
      trim: true,
      required: true
    ),
    string(
      name: 'ZOWE_CLI_ARTIFACTORY_BUILD',
      description: 'Zowe artifactory download build',
      defaultValue: 'Zowe CLI Bundle :: master',
      trim: true
    ),
    // >>>>>>>> parametters for test cases
    choice(
      name: 'NODE_VERSION',
      choices: ['v8.16.0', 'v6.17.0', 'v8.16.2', 'v8.17.0', 'v12.13.0', 'v12.14.1', 'v12.16.1'],
      description: 'This option is only valid for Marist server. The installation will set NODE_HOME to /ZOWE/node/node-{{version}}-os390-s390x.',
      trim: true
    ),
    string(
      name: 'INSTALL_TEST_DEBUG_INFORMATION',
      description: 'How to show debug logging for running install test cases.',
      defaultValue: 'zowe-install-test:*',
      trim: true
    ),
    string(
      name: 'SANITY_TEST_DEBUG_INFORMATION',
      description: 'How to show debug logging for running sanity test cases.',
      defaultValue: 'zowe-sanity-test:*',
      trim: true
    )
  )

  pipeline.setup(
    extraInit: {
      if (!params.STARTED_BY_AUTOMATION) {
        // The purpose of this stage is when you scan the repository, all branches/PRs builds will be
        // kicked off. This stage will pause the pipeline so you have time to cancel the build.
        //
        // NOTE: you have 5 minutes to cancel the build. After 5 minutes, the build will continue to
        //       next stage.
        timeout(time: 5, unit: 'MINUTES') { 
          input message: 'Do you want to continue the pipeline?', ok: "Continue"
        }
      }

      // upgrade npm
      sh 'npm install -g npm'
    }
  )

  pipeline.build(
    operation: {
      ansiColor('xterm') {
        dir(INSTALL_TEST_PATH) {
          sh "npm install && npm run build"
        }
        dir(SANITY_TEST_PATH) {
          sh "npm install"
        }
      }
    }
  )

  pipeline.createStage(
    name          : "Lint",
    isSkippable   : true,
    stage         : {
      ansiColor('xterm') {
        dir(INSTALL_TEST_PATH) {
          sh "npm run lint"
        }
        dir(SANITY_TEST_PATH) {
          sh "npm run lint"
        }
      }
    },
    timeout: [time: 2, unit: 'MINUTES']
  )


  pipeline.createStage(
    name          : "Download Zowe",
    isSkippable   : true,
    stage         : {
      pipeline.artifactory.download(
        specContent : """
{
  "files": [{
    "pattern": "${params.ZOWE_ARTIFACTORY_PATTERN}",
    "target": ".tmp/zowe/",
    "flat": "true",
    "build": "${params.ZOWE_ARTIFACTORY_BUILD}"
  }, {
    "pattern": "${params.ZOWE_CLI_ARTIFACTORY_PATTERN}",
    "target": ".tmp/cli/",
    "flat": "true",
    "build": "${params.ZOWE_CLI_ARTIFACTORY_BUILD}",
    "explode": "true"
  }]
}
""",
        expected    : 2
      )
    },
    timeout: [time: 20, unit: 'MINUTES']
  )

  pipeline.createStage(
    name          : "Install CLI",
    isSkippable   : true,
    stage         : {
      ansiColor('xterm') {
        // install CLI
        sh 'npm install -g .tmp/cli/zowe-cli*.tgz'
      }
    },
    timeout: [time: 10, unit: 'MINUTES']
  )

  pipeline.test(
    name              : "Test",
    operation         : {
      def serverCredentials = []
      TEST_SERVERS.each{ key, host ->
        def hostKey = host['ansible_host'].replaceAll(/[^A-Za-z0-9]/, '_').toUpperCase()
        serverCredentials.add(usernamePassword(
          credentialsId: host['ssh_hostport'],
          passwordVariable: "${hostKey}_SSH_PORT".toString(),
          usernameVariable: "${hostKey}_SSH_HOST".toString()
        ))
        serverCredentials.add(usernamePassword(
          credentialsId: host['ssh_userpass'],
          passwordVariable: "${hostKey}_SSH_PASSWORD".toString(),
          usernameVariable: "${hostKey}_SSH_USER".toString()
        ))
      }

      def zoweBuildFile = sh(
        script: "ls -1 .tmp/zowe/",
        returnStdout: true
      ).trim()
      def zoweBuild = pwd() + '/.tmp/zowe/' + zoweBuildFile
      // update build description with the zowe build be tested
      currentBuild.description = "${zoweBuildFile} with scope ${params.TEST_SCOPE}".toString()

      def testEnvVars = [
        'ANSIBLE_FORCE_COLOR=true',
        "TEST_SERVER=${TEST_SERVERS[params.TEST_SERVER]['ansible_host']}".toString(),
        "ZOWE_BUILD_LOCAL=${zoweBuild}".toString(),
        "SANITY_TEST_DEBUG=${params.SANITY_TEST_DEBUG_INFORMATION}".toString(),
        "DEBUG=${params.INSTALL_TEST_DEBUG_INFORMATION}".toString(),
      ]

      if (TEST_SERVERS[params.TEST_SERVER].containsKey('node_home_pattern')) {
        testEnvVars.add("ZOS_NODE_HOME=" + TEST_SERVERS[params.TEST_SERVER]['node_home_pattern'].replace('{NODE_VERSION}', params.NODE_VERSION))
      }
      echo "Test environment variables:\n" + testEnvVars.join("\n") + "\n"

      def lockResources = "zowe-install-test-${params.TEST_SERVER}".toString()
      def lockExtraResources = []
      // - jenkins_primary_lock
      // - jenkins_extra_locks
      if (TEST_SCOPES[params.TEST_SCOPE].containsKey('jenkins_primary_lock')) {
        lockResources = "zowe-install-test-${TEST_SCOPES[params.TEST_SCOPE]['jenkins_primary_lock']}".toString()
      }
      if (TEST_SCOPES[params.TEST_SCOPE].containsKey('jenkins_extra_locks')) {
        TEST_SCOPES[params.TEST_SCOPE]['jenkins_extra_locks'].each {
          lockExtraResources.add([resource: "zowe-install-test-${it}".toString()])
        }
      }

      lock(resource: lockResources, extra: lockExtraResources) {
      // timestamps {
      dir(INSTALL_TEST_PATH) {
      ansiColor('xterm') {
      withCredentials(serverCredentials) {
      withEnv(testEnvVars) {
        try {
          sh "npm test -- --testPathPattern \"${TEST_SCOPES[params.TEST_SCOPE]['test_files']}\""
        } finally {
          sh 'npm run merge-reports'
        }
      } // end of withEnv
      } // end of withCredentials
      } // end of ansiColor
      } // end of dir
      // end of timestamps
      } // end of lock
    },
    junit         : "${INSTALL_TEST_PATH}/reports/junit.xml",
    htmlReports   : [
      [dir: "${INSTALL_TEST_PATH}/reports", files: "index.html", name: "Report: Test Result"],
    ],
    timeout: [time: 360, unit: 'MINUTES'],
  )

  pipeline.end()
}
