---
# This playbook performs regular configuration after Zowe is installed.

# ============================================================================
- import_role:
    name: common
    tasks_from: validate_variables
  vars:
    variable_list:
    - work_dir_remote
    - zowe_root_dir
    - zowe_instance_dir
    - zowe_keystore_dir
    - zowe_install_logs_dir
    - zowe_dataset_prefix
    - zowe_jcllib
    - zowe_proclib_dsname
    - zowe_proclib_membername
    - zowe_runtime_group
    - zowe_runtime_user
    - zowe_xmem_proclib
    - zowe_xmem_parmlib
    # optional
    # - zowe_xmem_loadlib
    - zowe_xmem_pluginlib
    - zowe_xmem_proclib_member_zss
    - zowe_xmem_proclib_member_aux
    - zowe_xmem_stc_user
    - zowe_job_prefix
    - zowe_instance_id
    - zowe_apiml_catalog_port
    - zowe_apiml_discovery_port
    - zowe_apiml_gateway_port
    - zowe_apiml_gateway_timeout_millis
    - zowe_apiml_security_x509_enabled
    - zowe_apiml_security_zosmf_applid
    - zowe_apiml_security_auth_provider
    - zowe_jobs_api_port
    - zowe_mvs_api_port
    - zowe_jobs_explorer_port
    - zowe_mvs_explorer_port
    - zowe_uss_explorer_port
    - zowe_zlux_port
    - zowe_zss_port
    - zowe_zss_xmem_name
    - zowe_zlux_terminal_ssh_port
    - zowe_zlux_terminal_telnet_port
    - zos_security_system
    - zowe_lock_keystore

# ============================================================================
- name: Update zowe.yaml zowe.setup.dataset
  import_role:
    name: zos
    tasks_from: update_zowe_yaml
  vars:
    configs:
      # FIXME: we should only keep one set
      "zowe.setup.dataset.prefix": "{{ zowe_dataset_prefix }}"
      "zowe.setup.dataset.proclib": "{{ zowe_proclib_dsname }}"
      "zowe.setup.dataset.parmlib": "{{ zowe_xmem_parmlib }}"
      "zowe.setup.dataset.jcllib": "{{ zowe_jcllib }}"
      "zowe.setup.dataset.authLoadlib": "{{ zowe_xmem_loadlib }}"
      "zowe.setup.dataset.authPluginLib": "{{ zowe_xmem_pluginlib }}"
      "zowe.setup.mvs.hlq": "{{ zowe_dataset_prefix }}"
      "zowe.setup.mvs.proclib": "{{ zowe_proclib_dsname }}"
      "zowe.setup.mvs.parmlib": "{{ zowe_xmem_parmlib }}"
      "zowe.setup.mvs.jcllib": "{{ zowe_jcllib }}"
      "zowe.setup.mvs.authLoadlib": "{{ zowe_xmem_loadlib }}"
      "zowe.setup.mvs.authPluginLib": "{{ zowe_xmem_pluginlib }}"

- name: Update zowe.yaml zowe.setup.security
  import_role:
    name: zos
    tasks_from: update_zowe_yaml
  vars:
    configs:
      "zowe.setup.security.product": "{{ zos_security_system }}"
      "zowe.setup.security.groups.admin": "{{ zowe_runtime_group }}"
      "zowe.setup.security.groups.stc": "{{ zowe_xmem_stc_group }}"
      "zowe.setup.security.groups.sysProg": "{{ zowe_runtime_group }}"
      "zowe.setup.security.users.zowe": "{{ zowe_runtime_user }}"
      "zowe.setup.security.users.zis": "{{ zowe_xmem_stc_user }}"
      "zowe.setup.security.stcs.zowe": "{{ zowe_proclib_membername }}"
      "zowe.setup.security.stcs.zis": "{{ zowe_xmem_proclib_member_zss }}"
      "zowe.setup.security.stcs.aux": "{{ zowe_xmem_proclib_member_aux }}"

- name: Update zowe.yaml zowe.setup.certificate
  import_role:
    name: zos
    tasks_from: update_zowe_yaml
  vars:
    configs:
      "zowe.setup.certificate.type": "PKCS12"
      "zowe.setup.certificate.pkcs12.directory": "{{ zowe_keystore_dir }}"
      "zowe.setup.certificate.pkcs12.lock": "{{ zowe_lock_keystore|string|lower }}"
      "zowe.setup.certificate.pkcs12.name": "{{ zowe_keystore_alias }}"
      "zowe.setup.certificate.pkcs12.password": "{{ zowe_keystore_password }}"
      # "zowe.setup.certificate.pkcs12.caAlias": "{{ zowe_keystore_alias }}"
      # "zowe.setup.certificate.pkcs12.caPassword": "{{ zowe_keystore_alias }}"
  when: zos_keystore_mode is undefined or zos_keystore_mode != 'KEYSTORE_MODE_KEYRING'

- name: Update zowe.yaml zowe.verifyCertificates to STRICT
  import_role:
    name: zos
    tasks_from: update_zowe_yaml
  vars:
    configs:
      "zowe.verifyCertificates": "STRICT"
  when: zowe_apiml_verify_certficates_of_services and zowe_apiml_nonstrict_verify_certficates_of_services

- name: Update zowe.yaml zowe.verifyCertificates to NONSTRICT
  import_role:
    name: zos
    tasks_from: update_zowe_yaml
  vars:
    configs:
      "zowe.verifyCertificates": "NONSTRICT"
  when: not zowe_apiml_verify_certficates_of_services and zowe_apiml_nonstrict_verify_certficates_of_services

- name: Update zowe.yaml zowe.verifyCertificates to DISABLED
  import_role:
    name: zos
    tasks_from: update_zowe_yaml
  vars:
    configs:
      "zowe.verifyCertificates": "DISABLED"
  when: not zowe_apiml_verify_certficates_of_services and not zowe_apiml_nonstrict_verify_certficates_of_services

- name: Update zowe.yaml zowe.setup.vsam
  import_role:
    name: zos
    tasks_from: update_zowe_yaml
  vars:
    configs:
      "zowe.setup.vsam.volume": "{{ zowe_caching_vsam_volume }}"
      "zowe.setup.vsam.storageClass": "{{ zowe_caching_vsam_storage_class }}"
      "components.caching-service.storage.mode": "{{ zowe_caching_service_persistent }}"
      "components.caching-service.storage.vsam.name": "{{ zowe_dataset_prefix }}.{{ zowe_caching_service_vsam_dsprefix }}{{ zowe_instance_id }}"

- name: Update zowe.yaml zowe.setup.vsam.mode to NONRLS
  import_role:
    name: zos
    tasks_from: update_zowe_yaml
  vars:
    configs:
      "zowe.setup.vsam.mode": "NONRLS"
  when: not zos_vsam_rls

- name: Update zowe.yaml zowe.setup.vsam.mode to RLS
  import_role:
    name: zos
    tasks_from: update_zowe_yaml
  vars:
    configs:
      "zowe.setup.vsam.mode": "RLS"
  when: zos_vsam_rls

- name: Update zowe.yaml runtime configs
  import_role:
    name: zos
    tasks_from: update_zowe_yaml
  vars:
    configs:
      "zowe.runtimeDirectory": "{{ zowe_root_dir }}"
      "zowe.logDirectory": "{{ zowe_instance_dir }}/logs"
      "zowe.workspaceDirectory": "{{ zowe_instance_dir }}/workspace"
      "zowe.extensionDirectory": "{{ zowe_extension_dir }}"
      "zowe.job.name": "{{ zowe_job_prefix }}{{ zowe_instance_id }}SV"
      "zowe.job.prefix": "{{ zowe_job_prefix }}{{ zowe_instance_id }}"
      "zowe.externalDomains.0": "{{ zowe_external_domain_name }}"
      "zowe.externalPort": "{{ zowe_apiml_gateway_port }}"
      "java.home": "{{ zos_java_home }}"
      "node.home": "{{ zos_node_home }}"
      "zOSMF.host": "{{ zos_zosmf_host }}"
      "zOSMF.port": "{{ zos_zosmf_port }}"
      "zOSMF.applId": "{{ zowe_apiml_security_zosmf_applid }}"

- name: Update zowe.yaml components configs
  import_role:
    name: zos
    tasks_from: update_zowe_yaml
  vars:
    configs:
      "components.gateway.port": "{{ zowe_apiml_gateway_port }}"
      "components.metrics-service.port": "{{ zowe_apiml_metrics_service_port }}"
      "components.api-catalog.port": "{{ zowe_apiml_catalog_port }}"
      "components.discovery.port": "{{ zowe_apiml_discovery_port }}"
      "components.caching-service.port": "{{ zowe_caching_service_port }}"
      "components.app-server.port": "{{ zowe_zlux_port }}"
      "components.zss.port": "{{ zowe_zss_port }}"
      "components.jobs-api.port": "{{ zowe_jobs_api_port }}"
      "components.files-api.port": "{{ zowe_mvs_api_port }}"
      # other gateway configs
      "components.gateway.apiml.gateway.timeoutMillis": "{{ zowe_apiml_gateway_timeout_millis }}"
      "components.gateway.apiml.security.x509.enabled": "{{ zowe_apiml_security_x509_enabled|string|lower }}"
      "components.gateway.apiml.security.auth.provider": "{{ zowe_apiml_security_auth_provider|string|lower }}"
      "components.gateway.apiml.security.auth.zosmf.jwtAutoconfiguration": "{{ zowe_apiml_security_zosmf_jwt_autoconfiguration_mode }}"
      # FIXME: uncertain configs
      # sed -e "s+^ZWES_XMEM_SERVER_NAME=.*\$+ZWES_XMEM_SERVER_NAME={{ zowe_zss_xmem_name }}+" | \
      # sed -e "s+^ZWED_SSH_PORT=.*\$+ZWED_SSH_PORT={{ zowe_zlux_terminal_ssh_port }}+" | \
      # sed -e "s+^ZWED_TN3270_PORT=.*\$+ZWED_TN3270_PORT={{ zowe_zlux_terminal_telnet_port }}+" | \
      # sed -e "s+^ZWED_TN3270_SECURITY=.*\$+ZWED_TN3270_SECURITY={{ zowe_zlux_terminal_telnet_security_type }}+" | \

- name: Update zowe.yaml components enable status
  when: zowe_launch_components != '' and zowe_launch_components is not none
  block:
  - name: Disable all components if zowe_launch_components is defined
    include_role:
      name: zos
      tasks_from: update_zowe_yaml
    vars:
      configs:
        "components.{{ item }}.enabled": "false"
    with_items: "{{ zowe_core_components }}"
  - name: Update zowe.yaml components enable status
    include_role:
      name: zos
      tasks_from: update_zowe_yaml
    vars:
      configs:
        "components.{{ item }}.enabled": "true"
    with_items: "{{ zowe_launch_components.split(',') }}"

# ============================================================================
- name: Show zowe.yaml before zwe init
  raw: cat "{{ zowe_instance_dir }}/zowe.yaml"

# ============================================================================
- name: Init Zowe
  import_role:
    name: zos
    tasks_from: run_zwe
  vars:
    parameters: "init --update-config -l \"{{ zowe_install_logs_dir }}\""

# # ============================================================================
# # Run ZWEKRING
# - import_role:
#     name: configure
#     tasks_from: create_keyring
#   when: zos_keystore_mode is defined and zos_keystore_mode == 'KEYSTORE_MODE_KEYRING'
     
# # ============================================================================
# # Setup certificates for USS keystore (self-signed)
# - import_role:
#     name: configure
#     tasks_from: setup_certificates
#   when: zos_keystore_mode is undefined or zos_keystore_mode != 'KEYSTORE_MODE_KEYRING'

# # ============================================================================
# # Setup client certificates

# # Upload client certificate
# - import_role:
#     name: configure
#     tasks_from: upload_certificate
#   vars:
#     filename: USER-cert.cer
#     method: scp
# # Upload client CA certificate
# # This certificate will be configured in task Add the external CA to the truststore
# - import_role:
#     name: configure
#     tasks_from: upload_certificate
#   vars:
#     filename: APIML_External_Certificate_Authority.cer
#     method: scp

# # Upload client CA certificate in PKCS12
# # This certificate will be configured in task Add the external CA to the keyring
# - import_role:
#     name: configure
#     tasks_from: upload_certificate
#   vars:
#     filename: APIML_External_Certificate_Authority.p12
#     method: sftp

# - import_role:
#     name: configure
#     tasks_from: configure_client_certificates
#   vars:
#     certificate: "{{ work_dir_remote }}/USER-cert.cer"
#     dataset: USER
#     label: API ML Client

# # ============================================================================
# # Setup certificates for keyring (self-signed)
# - import_role:
#     name: configure
#     tasks_from: setup_keyring_certificates
#   when: zos_keystore_mode is defined and zos_keystore_mode == 'KEYSTORE_MODE_KEYRING'

# # ============================================================================
# # Add external API ML CA to the truststore
# - name: Add the external CA to the truststore
#   import_role:
#     name: zos
#     tasks_from: run_script
#   vars:
#     script_chdir: "{{ zowe_root_dir }}/bin"
#     script_filename: ./apiml_cm.sh
#     script_parameters: "--action trust --service-password {{ zowe_keystore_password }} --service-truststore {{ zowe_keystore_dir }}/{{ zowe_keystore_alias }}/{{ zowe_keystore_alias }}.truststore --service-storetype PKCS12 --certificate {{ work_dir_remote }}/APIML_External_Certificate_Authority.cer --alias amlexca"
#   when: zos_keystore_mode is undefined or zos_keystore_mode != 'KEYSTORE_MODE_KEYRING'

# - name: Add the external CA to the keyring
#   raw: "{{ zowe_root_dir }}/bin/utils/keyring-util/keyring-util IMPORT {{ zowe_runtime_user }} {{ zowe_keyring_alias }} amlexca CERTAUTH {{ work_dir_remote }}/APIML_External_Certificate_Authority.p12 password"
#   when: zos_keystore_mode is defined and zos_keystore_mode == 'KEYSTORE_MODE_KEYRING'
